"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./src/layout/Header.tsx":
/*!*******************************!*\
  !*** ./src/layout/Header.tsx ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DesktopNavLinks\": function() { return /* binding */ DesktopNavLinks; },\n/* harmony export */   \"LogoLink\": function() { return /* binding */ LogoLink; },\n/* harmony export */   \"MobileNavLinks\": function() { return /* binding */ MobileNavLinks; },\n/* harmony export */   \"MobileNavLinksContainer\": function() { return /* binding */ MobileNavLinksContainer; },\n/* harmony export */   \"NavLink\": function() { return /* binding */ NavLink; },\n/* harmony export */   \"NavLinks\": function() { return /* binding */ NavLinks; },\n/* harmony export */   \"NavToggle\": function() { return /* binding */ NavToggle; },\n/* harmony export */   \"PrimaryLink\": function() { return /* binding */ PrimaryLink; }\n/* harmony export */ });\n/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled/base */ \"./node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var framer_motion__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! framer-motion */ \"./node_modules/framer-motion/dist/es/index.mjs\");\n/* harmony import */ var helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! helpers */ \"./src/helpers/index.tsx\");\n/* harmony import */ var feather_icons_dist_icons_menu_svg__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! feather-icons/dist/icons/menu.svg */ \"./node_modules/feather-icons/dist/icons/menu.svg\");\n/* harmony import */ var feather_icons_dist_icons_x_svg__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! feather-icons/dist/icons/x.svg */ \"./node_modules/feather-icons/dist/icons/x.svg\");\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/link */ \"./node_modules/next/link.js\");\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/router */ \"./node_modules/next/router.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! classnames */ \"./node_modules/classnames/index.js\");\n/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var feather_icons_dist_icons_heart_svg__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! feather-icons/dist/icons/heart.svg */ \"./node_modules/feather-icons/dist/icons/heart.svg\");\n/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react-redux */ \"./node_modules/react-redux/es/index.js\");\n/* harmony import */ var store_slice_recipe_slice__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! store/slice/recipe.slice */ \"./src/store/slice/recipe.slice.ts\");\n/* harmony import */ var components_cards_CardRecipe__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! components/cards/CardRecipe */ \"./src/components/cards/CardRecipe.tsx\");\n/* harmony import */ var _emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @emotion/react/jsx-dev-runtime */ \"./node_modules/@emotion/react/jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js\");\n\n\nvar _jsxFileName = \"D:\\\\nash\\\\restaurant-ui\\\\src\\\\layout\\\\Header.tsx\",\n    _s = $RefreshSig$();\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst Header = /*#__PURE__*/(0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"header\",  false ? 0 : {\n  target: \"e1kpf8jc9\",\n  label: \"Header\"\n})( false ? 0 : {\n  name: \"1t4p6d4\",\n  styles: \"display:flex;justify-content:space-between;align-items:center;max-width:1280px;margin-left:auto;margin-right:auto;margin-top:0.75rem;margin-bottom:0.75rem\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6XFxuYXNoXFxyZXN0YXVyYW50LXVpXFxzcmNcXGxheW91dFxcSGVhZGVyLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFlZSIsImZpbGUiOiJEOlxcbmFzaFxccmVzdGF1cmFudC11aVxcc3JjXFxsYXlvdXRcXEhlYWRlci50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IG1vdGlvbiB9IGZyb20gXCJmcmFtZXItbW90aW9uXCI7XHJcbmltcG9ydCB0dywgeyBzdHlsZWQgfSBmcm9tIFwidHdpbi5tYWNyb1wiO1xyXG5pbXBvcnQgeyBSZWFjdE1vZGFsQWRhcHRlciwgdXNlQW5pbWF0ZWROYXZUb2dnbGVyIH0gZnJvbSBcImhlbHBlcnNcIjtcclxuaW1wb3J0IE1lbnVJY29uIGZyb20gXCJmZWF0aGVyLWljb25zL2Rpc3QvaWNvbnMvbWVudS5zdmdcIjtcclxuaW1wb3J0IENsb3NlSWNvbiBmcm9tIFwiZmVhdGhlci1pY29ucy9kaXN0L2ljb25zL3guc3ZnXCI7XHJcbmltcG9ydCB7IElIZWFkZXIgfSBmcm9tIFwidHlwZXNcIjtcclxuaW1wb3J0IExpbmsgZnJvbSBcIm5leHQvbGlua1wiO1xyXG5pbXBvcnQgeyB1c2VSb3V0ZXIgfSBmcm9tIFwibmV4dC9yb3V0ZXJcIjtcclxuaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSBcImNsYXNzbmFtZXNcIjtcclxuaW1wb3J0IEhlYXJ0SWNvbiBmcm9tIFwiZmVhdGhlci1pY29ucy9kaXN0L2ljb25zL2hlYXJ0LnN2Z1wiO1xyXG5pbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xyXG5pbXBvcnQgeyBnZXRGYXZvcml0ZUxpc3QgfSBmcm9tIFwic3RvcmUvc2xpY2UvcmVjaXBlLnNsaWNlXCI7XHJcbmltcG9ydCBDYXJkUmVjaXBlIGZyb20gXCJjb21wb25lbnRzL2NhcmRzL0NhcmRSZWNpcGVcIjtcclxuXHJcbmNvbnN0IEhlYWRlciA9IHR3LmhlYWRlcmBcclxuICBmbGV4IGp1c3RpZnktYmV0d2VlbiBpdGVtcy1jZW50ZXJcclxuICBtYXgtdy1zY3JlZW4teGwgbXgtYXV0b1xyXG4gIG15LTNcclxuYDtcclxuXHJcbi8qIFRoZSBiZWxvdyBjb2RlIGlzIGZvciBnZW5lcmF0aW5nIGR5bmFtaWMgYnJlYWsgcG9pbnRzIGZvciBuYXZiYXIuXHJcbiAqIFVzaW5nIHRoaXMgeW91IGNhbiBzcGVjaWZ5IGlmIHlvdSB3YW50IHRvIHN3aXRjaFxyXG4gKiB0byB0aGUgdG9nZ2xlYWJsZSBtb2JpbGUgbmF2YmFyIGF0IFwic21cIiwgXCJtZFwiIG9yIFwibGdcIiBvciBcInhsXCIgYWJvdmUgdXNpbmcgdGhlIGNvbGxhcHNlQnJlYWtwb2ludENsYXNzIHByb3BcclxuICogSXRzIHdyaXR0ZW4gbGlrZSB0aGlzIGJlY2F1c2Ugd2UgYXJlIHVzaW5nIG1hY3JvcyBhbmQgd2UgY2FuIG5vdCBpbnNlcnQgZHluYW1pYyB2YXJpYWJsZXMgaW4gbWFjcm9zXHJcbiAqL1xyXG5cclxuY29uc3QgY29sbGFwc2VCcmVha1BvaW50Q3NzTWFwID0ge1xyXG4gIHNtOiB7XHJcbiAgICBtb2JpbGVOYXZMaW5rczogdHdgc206aGlkZGVuYCxcclxuICAgIGRlc2t0b3BOYXZMaW5rczogdHdgc206ZmxleGAsXHJcbiAgICBtb2JpbGVOYXZMaW5rc0NvbnRhaW5lcjogdHdgc206aGlkZGVuYCxcclxuICB9LFxyXG4gIG1kOiB7XHJcbiAgICBtb2JpbGVOYXZMaW5rczogdHdgbWQ6aGlkZGVuYCxcclxuICAgIGRlc2t0b3BOYXZMaW5rczogdHdgbWQ6ZmxleGAsXHJcbiAgICBtb2JpbGVOYXZMaW5rc0NvbnRhaW5lcjogdHdgbWQ6aGlkZGVuYCxcclxuICB9LFxyXG4gIGxnOiB7XHJcbiAgICBtb2JpbGVOYXZMaW5rczogdHdgbGc6aGlkZGVuYCxcclxuICAgIGRlc2t0b3BOYXZMaW5rczogdHdgbGc6ZmxleGAsXHJcbiAgICBtb2JpbGVOYXZMaW5rc0NvbnRhaW5lcjogdHdgbGc6aGlkZGVuYCxcclxuICB9LFxyXG4gIHhsOiB7XHJcbiAgICBtb2JpbGVOYXZMaW5rczogdHdgbGc6aGlkZGVuYCxcclxuICAgIGRlc2t0b3BOYXZMaW5rczogdHdgbGc6ZmxleGAsXHJcbiAgICBtb2JpbGVOYXZMaW5rc0NvbnRhaW5lcjogdHdgbGc6aGlkZGVuYCxcclxuICB9LFxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IE5hdkxpbmtzOiBhbnkgPSB0dy5kaXZgaW5saW5lLWJsb2NrYDtcclxuZXhwb3J0IGNvbnN0IE5hdkxpbmsgPSBzdHlsZWQuYWBcclxuICAke3R3YGN1cnNvci1wb2ludGVyXHJcbiAgdGV4dC1sZyBteS0yIGxnOnRleHQtc20gbGc6bXgtNiBsZzpteS0wXHJcbiAgZm9udC1zZW1pYm9sZCB0cmFja2luZy13aWRlIHRyYW5zaXRpb24gZHVyYXRpb24tMzAwXHJcbiAgcGItMSBib3JkZXItYi0yIGJvcmRlci10cmFuc3BhcmVudCBob3Zlcjpib3JkZXItcHJpbWFyeS01MDAgaG9jdXM6dGV4dC1wcmltYXJ5LTUwMGB9O1xyXG4gICYuYWN0aXZlIHtcclxuICAgICR7dHdgYm9yZGVyLXByaW1hcnktNTAwIHRleHQtcHJpbWFyeS01MDBgfVxyXG4gIH1cclxuYDtcclxuZXhwb3J0IGNvbnN0IFByaW1hcnlMaW5rOiBhbnkgPSB0dyhOYXZMaW5rKWBcclxuICBsZzpteC0wXHJcbiAgcHgtOCBweS0zIHJvdW5kZWQgYmctcHJpbWFyeS01MDAgdGV4dC1ncmF5LTEwMFxyXG4gIGhvY3VzOmJnLXByaW1hcnktNzAwIGhvY3VzOnRleHQtZ3JheS0yMDAgZm9jdXM6c2hhZG93LW91dGxpbmVcclxuICBib3JkZXItYi0wXHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgTG9nb0xpbmsgPSBzdHlsZWQoTmF2TGluaylgXHJcbiAgJHt0d2BmbGV4IGl0ZW1zLWNlbnRlciBmb250LWJsYWNrIGJvcmRlci1iLTAgdGV4dC0yeGwhIG1sLTAhYH07XHJcbiAgaW1nIHtcclxuICAgICR7dHdgdy0xMCBtci0zYH1cclxuICB9XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgTW9iaWxlTmF2TGlua3NDb250YWluZXI6IGFueSA9IHR3Lm5hdmBmbGV4IGZsZXgtMSBpdGVtcy1jZW50ZXIganVzdGlmeS1iZXR3ZWVuYDtcclxuZXhwb3J0IGNvbnN0IE5hdlRvZ2dsZSA9IHR3LmJ1dHRvbmBcclxuICBsZzpoaWRkZW4gei0yMCBmb2N1czpvdXRsaW5lLW5vbmUgaG9jdXM6dGV4dC1wcmltYXJ5LTUwMCB0cmFuc2l0aW9uIGR1cmF0aW9uLTMwMFxyXG5gO1xyXG5leHBvcnQgY29uc3QgTW9iaWxlTmF2TGlua3MgPSBtb3Rpb24oc3R5bGVkLmRpdmBcclxuICAke3R3YGxnOmhpZGRlbiB6LTEwIGZpeGVkIHRvcC0wIGluc2V0LXgtMCBteC00IG15LTYgcC04IGJvcmRlciB0ZXh0LWNlbnRlciByb3VuZGVkLWxnIHRleHQtZ3JheS05MDAgYmctd2hpdGVgfVxyXG4gICR7TmF2TGlua3N9IHtcclxuICAgICR7dHdgZmxleCBmbGV4LWNvbCBpdGVtcy1jZW50ZXJgfVxyXG4gIH1cclxuYCk7XHJcblxyXG5leHBvcnQgY29uc3QgRGVza3RvcE5hdkxpbmtzOiBhbnkgPSB0dy5uYXZgXHJcbiAgaGlkZGVuIGxnOmZsZXggZmxleC0xIGp1c3RpZnktYmV0d2VlbiBpdGVtcy1jZW50ZXJcclxuYDtcclxuXHJcbmNvbnN0IElucHV0ID0gdHcuaW5wdXRgaG92ZXI6Ym9yZGVyLXByaW1hcnktMTAwIG1yLTMgYm9yZGVyLTIgYm9yZGVyLXNvbGlkIHAtMiByb3VuZGVkIGJvcmRlci1ncmF5LTMwMGA7XHJcblxyXG5jb25zdCB0YWJzID0gW1xyXG4gIHtcclxuICAgIHBhdGhuYW1lOiBcIi9hYm91dC11c1wiLFxyXG4gICAgbmFtZTogXCJBYm91dFwiLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgcGF0aG5hbWU6IFwiL3JlY2lwZXNcIixcclxuICAgIG5hbWU6IFwiUmVjaXBlXCIsXHJcbiAgfSxcclxuICB7XHJcbiAgICBwYXRobmFtZTogXCIvcG9zdHNcIixcclxuICAgIG5hbWU6IFwiQmxvZ1wiLFxyXG4gIH0sXHJcbl07XHJcblxyXG5leHBvcnQgZGVmYXVsdCAoe1xyXG4gIGxvZ29MaW5rLFxyXG4gIGxpbmtzLFxyXG4gIGNsYXNzTmFtZSxcclxuICBjb2xsYXBzZUJyZWFrcG9pbnRDbGFzcyA9IFwibGdcIixcclxufTogSUhlYWRlcikgPT4ge1xyXG4gIGNvbnN0IHJvdXRlciA9IHVzZVJvdXRlcigpO1xyXG4gIGNvbnN0IFtzaG93TW9kYWwsIHNldFNob3dNb2RhbF0gPSB1c2VTdGF0ZTxib29sZWFuPihmYWxzZSlcclxuICBjb25zdCBpbnB1dFJlZiA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcclxuICBjb25zdCBhY3RpdmVUYWIgPSByb3V0ZXIucGF0aG5hbWU7XHJcbiAgY29uc3QgZmF2b3JpdGVMaXN0ID0gdXNlU2VsZWN0b3IoZ2V0RmF2b3JpdGVMaXN0KVxyXG5cclxuICBjb25zdCBzaG93RmF2b3JpdGVMaXN0ID0gKCkgPT4ge1xyXG4gICAgc2V0U2hvd01vZGFsKHRydWUpXHJcbiAgfVxyXG5cclxuICBjb25zdCBkZWZhdWx0TGlua3MgPSBbXHJcbiAgICA8TmF2TGlua3Mga2V5PXsxfT5cclxuICAgICAge3RhYnMubWFwKChlbCkgPT4gKFxyXG4gICAgICAgIDxMaW5rIGtleT17ZWwucGF0aG5hbWV9IGhyZWY9e2VsLnBhdGhuYW1lfT5cclxuICAgICAgICAgIDxOYXZMaW5rXHJcbiAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NuYW1lcyh7IGFjdGl2ZTogZWwucGF0aG5hbWUgPT09IGFjdGl2ZVRhYiB9KX1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAge2VsLm5hbWV9XHJcbiAgICAgICAgICA8L05hdkxpbms+XHJcbiAgICAgICAgPC9MaW5rPlxyXG4gICAgICApKX1cclxuICAgICAgPE5hdkxpbmsgb25DbGljaz17c2hvd0Zhdm9yaXRlTGlzdH0+XHJcbiAgICAgICAgPEhlYXJ0SWNvbiB0dz1cImlubGluZVwiIC8+XHJcbiAgICAgIDwvTmF2TGluaz5cclxuICAgIDwvTmF2TGlua3M+LFxyXG4gIF07XHJcbiAgY29uc3QgeyBzaG93TmF2TGlua3MsIGFuaW1hdGlvbiwgdG9nZ2xlTmF2YmFyIH0gPSB1c2VBbmltYXRlZE5hdlRvZ2dsZXIoKTtcclxuICBjb25zdCBjb2xsYXBzZUJyZWFrcG9pbnRDc3MgPVxyXG4gICAgY29sbGFwc2VCcmVha1BvaW50Q3NzTWFwW1xyXG4gICAgICBjb2xsYXBzZUJyZWFrcG9pbnRDbGFzcyBhcyBrZXlvZiB0eXBlb2YgY29sbGFwc2VCcmVha1BvaW50Q3NzTWFwXHJcbiAgICBdO1xyXG5cclxuICBjb25zdCBkZWZhdWx0TG9nb0xpbmsgPSAoXHJcbiAgICA8TGluayBocmVmPVwiL1wiPlxyXG4gICAgICA8TG9nb0xpbms+XHJcbiAgICAgICAgPGltZyBzcmM9e1wiL2ltYWdlcy9sb2dvLmpwZ1wifSBhbHQ9XCJsb2dvXCIgLz5cclxuICAgICAgICBIb21lS2l0Y2hlblxyXG4gICAgICA8L0xvZ29MaW5rPlxyXG4gICAgPC9MaW5rPlxyXG4gICk7XHJcblxyXG4gIGxvZ29MaW5rID0gbG9nb0xpbmsgfHwgZGVmYXVsdExvZ29MaW5rO1xyXG4gIGxpbmtzID0gbGlua3MgfHwgZGVmYXVsdExpbmtzO1xyXG5cclxuICBjb25zdCBzZWFyY2hSZWNpcGUgPSBhc3luYyAoZTogS2V5Ym9hcmRFdmVudCkgPT4ge1xyXG4gICAgaWYgKGUua2V5ID09PSBcIkVudGVyXCIpIHtcclxuICAgICAgaWYgKGlucHV0UmVmLmN1cnJlbnQ/LnZhbHVlPy50cmltKCkgPT09IFwiXCIpIHtcclxuICAgICAgICByb3V0ZXIucHVzaCh7XHJcbiAgICAgICAgICBwYXRobmFtZTogXCIvcmVjaXBlc1wiLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9IGVsc2VcclxuICAgICAgICByb3V0ZXIucHVzaCh7XHJcbiAgICAgICAgICBwYXRobmFtZTogXCIvc2VhcmNoXCIsXHJcbiAgICAgICAgICBxdWVyeToge1xyXG4gICAgICAgICAgICBzOiBpbnB1dFJlZi5jdXJyZW50Py52YWx1ZSxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgdG9nZ2xlTW9kYWwgPSAoKSA9PiB7XHJcbiAgICBzZXRTaG93TW9kYWwocHJldlN0YXRlID0+ICFwcmV2U3RhdGUpXHJcbiAgfVxyXG5cclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgaW5wdXRSZWYuY3VycmVudC52YWx1ZSA9IHJvdXRlci5xdWVyeT8ucyB8fCBcIlwiO1xyXG4gIH0sIFtpbnB1dFJlZi5jdXJyZW50XSk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8SGVhZGVyIGNsYXNzTmFtZT17Y2xhc3NOYW1lIHx8IFwiaGVhZGVyLWxpZ2h0XCJ9PlxyXG4gICAgICA8RGVza3RvcE5hdkxpbmtzIGNzcz17Y29sbGFwc2VCcmVha3BvaW50Q3NzLmRlc2t0b3BOYXZMaW5rc30+XHJcbiAgICAgICAge2xvZ29MaW5rfVxyXG4gICAgICAgIDxkaXY+XHJcbiAgICAgICAgICA8SW5wdXRcclxuICAgICAgICAgICAgcmVmPXtpbnB1dFJlZn1cclxuICAgICAgICAgICAgb25LZXlVcD17c2VhcmNoUmVjaXBlfVxyXG4gICAgICAgICAgICBpZD1cIm5hbWUtaW5wdXRcIlxyXG4gICAgICAgICAgICB0eXBlPVwidGV4dFwiXHJcbiAgICAgICAgICAgIG5hbWU9XCJuYW1lXCJcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJTZWFyY2ggcmVjaXBlXCJcclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgICB7bGlua3N9XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvRGVza3RvcE5hdkxpbmtzPlxyXG5cclxuICAgICAgPE1vYmlsZU5hdkxpbmtzQ29udGFpbmVyXHJcbiAgICAgICAgY3NzPXtjb2xsYXBzZUJyZWFrcG9pbnRDc3MubW9iaWxlTmF2TGlua3NDb250YWluZXJ9XHJcbiAgICAgID5cclxuICAgICAgICB7bG9nb0xpbmt9XHJcbiAgICAgICAgPE1vYmlsZU5hdkxpbmtzXHJcbiAgICAgICAgICBpbml0aWFsPXt7IHg6IFwiMTUwJVwiLCBkaXNwbGF5OiBcIm5vbmVcIiB9fVxyXG4gICAgICAgICAgYW5pbWF0ZT17YW5pbWF0aW9ufVxyXG4gICAgICAgICAgY3NzPXtjb2xsYXBzZUJyZWFrcG9pbnRDc3MubW9iaWxlTmF2TGlua3N9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAge2xpbmtzfVxyXG4gICAgICAgIDwvTW9iaWxlTmF2TGlua3M+XHJcbiAgICAgICAgPE5hdlRvZ2dsZVxyXG4gICAgICAgICAgb25DbGljaz17dG9nZ2xlTmF2YmFyfVxyXG4gICAgICAgICAgY2xhc3NOYW1lPXtzaG93TmF2TGlua3MgPyBcIm9wZW5cIiA6IFwiY2xvc2VkXCJ9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAge3Nob3dOYXZMaW5rcyA/IChcclxuICAgICAgICAgICAgPENsb3NlSWNvbiB0dz1cInctNiBoLTZcIiAvPlxyXG4gICAgICAgICAgKSA6IChcclxuICAgICAgICAgICAgPE1lbnVJY29uIHR3PVwidy02IGgtNlwiIC8+XHJcbiAgICAgICAgICApfVxyXG4gICAgICAgIDwvTmF2VG9nZ2xlPlxyXG4gICAgICA8L01vYmlsZU5hdkxpbmtzQ29udGFpbmVyPlxyXG5cclxuICAgICAgPFJlYWN0TW9kYWxBZGFwdGVyXHJcbiAgICAgICAgICB0aXRsZT1cIkZhdm9yaXRlIGxpc3RcIlxyXG4gICAgICAgICAgc2hvdz17c2hvd01vZGFsfVxyXG4gICAgICAgICAgb25DbG9zZT17dG9nZ2xlTW9kYWx9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgICB7ZmF2b3JpdGVMaXN0Lm1hcChlbCA9PiBcclxuICAgICAgICAgICAgICA8Q2FyZFJlY2lwZSBpdGVtc1BlclJvdz17M30ga2V5PXtlbC5pZE1lYWx9IGRhdGE9e2VsfS8+XHJcbiAgICAgICAgICAgICl9XHJcbiAgICAgICAgPC9SZWFjdE1vZGFsQWRhcHRlcj5cclxuICAgIDwvSGVhZGVyPlxyXG4gICk7XHJcbn07XHJcbiJdfQ== */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n/* The below code is for generating dynamic break points for navbar.\r\n * Using this you can specify if you want to switch\r\n * to the toggleable mobile navbar at \"sm\", \"md\" or \"lg\" or \"xl\" above using the collapseBreakpointClass prop\r\n * Its written like this because we are using macros and we can not insert dynamic variables in macros\r\n */\n\n\n_c = Header;\nconst collapseBreakPointCssMap = {\n  sm: {\n    mobileNavLinks: {\n      \"@media (min-width: 640px)\": {\n        \"display\": \"none\"\n      }\n    },\n    desktopNavLinks: {\n      \"@media (min-width: 640px)\": {\n        \"display\": \"flex\"\n      }\n    },\n    mobileNavLinksContainer: {\n      \"@media (min-width: 640px)\": {\n        \"display\": \"none\"\n      }\n    }\n  },\n  md: {\n    mobileNavLinks: {\n      \"@media (min-width: 768px)\": {\n        \"display\": \"none\"\n      }\n    },\n    desktopNavLinks: {\n      \"@media (min-width: 768px)\": {\n        \"display\": \"flex\"\n      }\n    },\n    mobileNavLinksContainer: {\n      \"@media (min-width: 768px)\": {\n        \"display\": \"none\"\n      }\n    }\n  },\n  lg: {\n    mobileNavLinks: {\n      \"@media (min-width: 1024px)\": {\n        \"display\": \"none\"\n      }\n    },\n    desktopNavLinks: {\n      \"@media (min-width: 1024px)\": {\n        \"display\": \"flex\"\n      }\n    },\n    mobileNavLinksContainer: {\n      \"@media (min-width: 1024px)\": {\n        \"display\": \"none\"\n      }\n    }\n  },\n  xl: {\n    mobileNavLinks: {\n      \"@media (min-width: 1024px)\": {\n        \"display\": \"none\"\n      }\n    },\n    desktopNavLinks: {\n      \"@media (min-width: 1024px)\": {\n        \"display\": \"flex\"\n      }\n    },\n    mobileNavLinksContainer: {\n      \"@media (min-width: 1024px)\": {\n        \"display\": \"none\"\n      }\n    }\n  }\n};\nconst NavLinks = /*#__PURE__*/(0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",  false ? 0 : {\n  target: \"e1kpf8jc8\",\n  label: \"NavLinks\"\n})( false ? 0 : {\n  name: \"1r5gb7q\",\n  styles: \"display:inline-block\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n_c2 = NavLinks;\nconst NavLink = /*#__PURE__*/(0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"a\",  false ? 0 : {\n  target: \"e1kpf8jc7\",\n  label: \"NavLink\"\n})( false ? 0 : {\n  name: \"cwr333\",\n  styles: \"transition-property:background-color, border-color, color, fill, stroke, opacity, box-shadow, transform;cursor:pointer;font-size:1.125rem;margin-top:0.5rem;margin-bottom:0.5rem;font-weight:600;letter-spacing:0.025em;transition-duration:300ms;padding-bottom:0.25rem;border-bottom-width:2px;border-color:rgba(0, 0, 0, 0);:hover{--tw-border-opacity:1;border-color:rgba(100, 21, 255, var(--tw-border-opacity));}:hover, :focus{--tw-text-opacity:1;color:rgba(100, 21, 255, var(--tw-text-opacity));}@media (min-width: 1024px){font-size:0.875rem;margin-left:1.5rem;margin-right:1.5rem;margin-top:0;margin-bottom:0;};&.active{--tw-border-opacity:1;border-color:rgba(100, 21, 255, var(--tw-border-opacity));--tw-text-opacity:1;color:rgba(100, 21, 255, var(--tw-text-opacity));;}\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6XFxuYXNoXFxyZXN0YXVyYW50LXVpXFxzcmNcXGxheW91dFxcSGVhZGVyLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFtRCtCIiwiZmlsZSI6IkQ6XFxuYXNoXFxyZXN0YXVyYW50LXVpXFxzcmNcXGxheW91dFxcSGVhZGVyLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgbW90aW9uIH0gZnJvbSBcImZyYW1lci1tb3Rpb25cIjtcclxuaW1wb3J0IHR3LCB7IHN0eWxlZCB9IGZyb20gXCJ0d2luLm1hY3JvXCI7XHJcbmltcG9ydCB7IFJlYWN0TW9kYWxBZGFwdGVyLCB1c2VBbmltYXRlZE5hdlRvZ2dsZXIgfSBmcm9tIFwiaGVscGVyc1wiO1xyXG5pbXBvcnQgTWVudUljb24gZnJvbSBcImZlYXRoZXItaWNvbnMvZGlzdC9pY29ucy9tZW51LnN2Z1wiO1xyXG5pbXBvcnQgQ2xvc2VJY29uIGZyb20gXCJmZWF0aGVyLWljb25zL2Rpc3QvaWNvbnMveC5zdmdcIjtcclxuaW1wb3J0IHsgSUhlYWRlciB9IGZyb20gXCJ0eXBlc1wiO1xyXG5pbXBvcnQgTGluayBmcm9tIFwibmV4dC9saW5rXCI7XHJcbmltcG9ydCB7IHVzZVJvdXRlciB9IGZyb20gXCJuZXh0L3JvdXRlclwiO1xyXG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tIFwiY2xhc3NuYW1lc1wiO1xyXG5pbXBvcnQgSGVhcnRJY29uIGZyb20gXCJmZWF0aGVyLWljb25zL2Rpc3QvaWNvbnMvaGVhcnQuc3ZnXCI7XHJcbmltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XHJcbmltcG9ydCB7IGdldEZhdm9yaXRlTGlzdCB9IGZyb20gXCJzdG9yZS9zbGljZS9yZWNpcGUuc2xpY2VcIjtcclxuaW1wb3J0IENhcmRSZWNpcGUgZnJvbSBcImNvbXBvbmVudHMvY2FyZHMvQ2FyZFJlY2lwZVwiO1xyXG5cclxuY29uc3QgSGVhZGVyID0gdHcuaGVhZGVyYFxyXG4gIGZsZXgganVzdGlmeS1iZXR3ZWVuIGl0ZW1zLWNlbnRlclxyXG4gIG1heC13LXNjcmVlbi14bCBteC1hdXRvXHJcbiAgbXktM1xyXG5gO1xyXG5cclxuLyogVGhlIGJlbG93IGNvZGUgaXMgZm9yIGdlbmVyYXRpbmcgZHluYW1pYyBicmVhayBwb2ludHMgZm9yIG5hdmJhci5cclxuICogVXNpbmcgdGhpcyB5b3UgY2FuIHNwZWNpZnkgaWYgeW91IHdhbnQgdG8gc3dpdGNoXHJcbiAqIHRvIHRoZSB0b2dnbGVhYmxlIG1vYmlsZSBuYXZiYXIgYXQgXCJzbVwiLCBcIm1kXCIgb3IgXCJsZ1wiIG9yIFwieGxcIiBhYm92ZSB1c2luZyB0aGUgY29sbGFwc2VCcmVha3BvaW50Q2xhc3MgcHJvcFxyXG4gKiBJdHMgd3JpdHRlbiBsaWtlIHRoaXMgYmVjYXVzZSB3ZSBhcmUgdXNpbmcgbWFjcm9zIGFuZCB3ZSBjYW4gbm90IGluc2VydCBkeW5hbWljIHZhcmlhYmxlcyBpbiBtYWNyb3NcclxuICovXHJcblxyXG5jb25zdCBjb2xsYXBzZUJyZWFrUG9pbnRDc3NNYXAgPSB7XHJcbiAgc206IHtcclxuICAgIG1vYmlsZU5hdkxpbmtzOiB0d2BzbTpoaWRkZW5gLFxyXG4gICAgZGVza3RvcE5hdkxpbmtzOiB0d2BzbTpmbGV4YCxcclxuICAgIG1vYmlsZU5hdkxpbmtzQ29udGFpbmVyOiB0d2BzbTpoaWRkZW5gLFxyXG4gIH0sXHJcbiAgbWQ6IHtcclxuICAgIG1vYmlsZU5hdkxpbmtzOiB0d2BtZDpoaWRkZW5gLFxyXG4gICAgZGVza3RvcE5hdkxpbmtzOiB0d2BtZDpmbGV4YCxcclxuICAgIG1vYmlsZU5hdkxpbmtzQ29udGFpbmVyOiB0d2BtZDpoaWRkZW5gLFxyXG4gIH0sXHJcbiAgbGc6IHtcclxuICAgIG1vYmlsZU5hdkxpbmtzOiB0d2BsZzpoaWRkZW5gLFxyXG4gICAgZGVza3RvcE5hdkxpbmtzOiB0d2BsZzpmbGV4YCxcclxuICAgIG1vYmlsZU5hdkxpbmtzQ29udGFpbmVyOiB0d2BsZzpoaWRkZW5gLFxyXG4gIH0sXHJcbiAgeGw6IHtcclxuICAgIG1vYmlsZU5hdkxpbmtzOiB0d2BsZzpoaWRkZW5gLFxyXG4gICAgZGVza3RvcE5hdkxpbmtzOiB0d2BsZzpmbGV4YCxcclxuICAgIG1vYmlsZU5hdkxpbmtzQ29udGFpbmVyOiB0d2BsZzpoaWRkZW5gLFxyXG4gIH0sXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgTmF2TGlua3M6IGFueSA9IHR3LmRpdmBpbmxpbmUtYmxvY2tgO1xyXG5leHBvcnQgY29uc3QgTmF2TGluayA9IHN0eWxlZC5hYFxyXG4gICR7dHdgY3Vyc29yLXBvaW50ZXJcclxuICB0ZXh0LWxnIG15LTIgbGc6dGV4dC1zbSBsZzpteC02IGxnOm15LTBcclxuICBmb250LXNlbWlib2xkIHRyYWNraW5nLXdpZGUgdHJhbnNpdGlvbiBkdXJhdGlvbi0zMDBcclxuICBwYi0xIGJvcmRlci1iLTIgYm9yZGVyLXRyYW5zcGFyZW50IGhvdmVyOmJvcmRlci1wcmltYXJ5LTUwMCBob2N1czp0ZXh0LXByaW1hcnktNTAwYH07XHJcbiAgJi5hY3RpdmUge1xyXG4gICAgJHt0d2Bib3JkZXItcHJpbWFyeS01MDAgdGV4dC1wcmltYXJ5LTUwMGB9XHJcbiAgfVxyXG5gO1xyXG5leHBvcnQgY29uc3QgUHJpbWFyeUxpbms6IGFueSA9IHR3KE5hdkxpbmspYFxyXG4gIGxnOm14LTBcclxuICBweC04IHB5LTMgcm91bmRlZCBiZy1wcmltYXJ5LTUwMCB0ZXh0LWdyYXktMTAwXHJcbiAgaG9jdXM6YmctcHJpbWFyeS03MDAgaG9jdXM6dGV4dC1ncmF5LTIwMCBmb2N1czpzaGFkb3ctb3V0bGluZVxyXG4gIGJvcmRlci1iLTBcclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBMb2dvTGluayA9IHN0eWxlZChOYXZMaW5rKWBcclxuICAke3R3YGZsZXggaXRlbXMtY2VudGVyIGZvbnQtYmxhY2sgYm9yZGVyLWItMCB0ZXh0LTJ4bCEgbWwtMCFgfTtcclxuICBpbWcge1xyXG4gICAgJHt0d2B3LTEwIG1yLTNgfVxyXG4gIH1cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBNb2JpbGVOYXZMaW5rc0NvbnRhaW5lcjogYW55ID0gdHcubmF2YGZsZXggZmxleC0xIGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWJldHdlZW5gO1xyXG5leHBvcnQgY29uc3QgTmF2VG9nZ2xlID0gdHcuYnV0dG9uYFxyXG4gIGxnOmhpZGRlbiB6LTIwIGZvY3VzOm91dGxpbmUtbm9uZSBob2N1czp0ZXh0LXByaW1hcnktNTAwIHRyYW5zaXRpb24gZHVyYXRpb24tMzAwXHJcbmA7XHJcbmV4cG9ydCBjb25zdCBNb2JpbGVOYXZMaW5rcyA9IG1vdGlvbihzdHlsZWQuZGl2YFxyXG4gICR7dHdgbGc6aGlkZGVuIHotMTAgZml4ZWQgdG9wLTAgaW5zZXQteC0wIG14LTQgbXktNiBwLTggYm9yZGVyIHRleHQtY2VudGVyIHJvdW5kZWQtbGcgdGV4dC1ncmF5LTkwMCBiZy13aGl0ZWB9XHJcbiAgJHtOYXZMaW5rc30ge1xyXG4gICAgJHt0d2BmbGV4IGZsZXgtY29sIGl0ZW1zLWNlbnRlcmB9XHJcbiAgfVxyXG5gKTtcclxuXHJcbmV4cG9ydCBjb25zdCBEZXNrdG9wTmF2TGlua3M6IGFueSA9IHR3Lm5hdmBcclxuICBoaWRkZW4gbGc6ZmxleCBmbGV4LTEganVzdGlmeS1iZXR3ZWVuIGl0ZW1zLWNlbnRlclxyXG5gO1xyXG5cclxuY29uc3QgSW5wdXQgPSB0dy5pbnB1dGBob3Zlcjpib3JkZXItcHJpbWFyeS0xMDAgbXItMyBib3JkZXItMiBib3JkZXItc29saWQgcC0yIHJvdW5kZWQgYm9yZGVyLWdyYXktMzAwYDtcclxuXHJcbmNvbnN0IHRhYnMgPSBbXHJcbiAge1xyXG4gICAgcGF0aG5hbWU6IFwiL2Fib3V0LXVzXCIsXHJcbiAgICBuYW1lOiBcIkFib3V0XCIsXHJcbiAgfSxcclxuICB7XHJcbiAgICBwYXRobmFtZTogXCIvcmVjaXBlc1wiLFxyXG4gICAgbmFtZTogXCJSZWNpcGVcIixcclxuICB9LFxyXG4gIHtcclxuICAgIHBhdGhuYW1lOiBcIi9wb3N0c1wiLFxyXG4gICAgbmFtZTogXCJCbG9nXCIsXHJcbiAgfSxcclxuXTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0ICh7XHJcbiAgbG9nb0xpbmssXHJcbiAgbGlua3MsXHJcbiAgY2xhc3NOYW1lLFxyXG4gIGNvbGxhcHNlQnJlYWtwb2ludENsYXNzID0gXCJsZ1wiLFxyXG59OiBJSGVhZGVyKSA9PiB7XHJcbiAgY29uc3Qgcm91dGVyID0gdXNlUm91dGVyKCk7XHJcbiAgY29uc3QgW3Nob3dNb2RhbCwgc2V0U2hvd01vZGFsXSA9IHVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKVxyXG4gIGNvbnN0IGlucHV0UmVmID0gdXNlUmVmPEhUTUxJbnB1dEVsZW1lbnQ+KG51bGwpO1xyXG4gIGNvbnN0IGFjdGl2ZVRhYiA9IHJvdXRlci5wYXRobmFtZTtcclxuICBjb25zdCBmYXZvcml0ZUxpc3QgPSB1c2VTZWxlY3RvcihnZXRGYXZvcml0ZUxpc3QpXHJcblxyXG4gIGNvbnN0IHNob3dGYXZvcml0ZUxpc3QgPSAoKSA9PiB7XHJcbiAgICBzZXRTaG93TW9kYWwodHJ1ZSlcclxuICB9XHJcblxyXG4gIGNvbnN0IGRlZmF1bHRMaW5rcyA9IFtcclxuICAgIDxOYXZMaW5rcyBrZXk9ezF9PlxyXG4gICAgICB7dGFicy5tYXAoKGVsKSA9PiAoXHJcbiAgICAgICAgPExpbmsga2V5PXtlbC5wYXRobmFtZX0gaHJlZj17ZWwucGF0aG5hbWV9PlxyXG4gICAgICAgICAgPE5hdkxpbmtcclxuICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc25hbWVzKHsgYWN0aXZlOiBlbC5wYXRobmFtZSA9PT0gYWN0aXZlVGFiIH0pfVxyXG4gICAgICAgICAgPlxyXG4gICAgICAgICAgICB7ZWwubmFtZX1cclxuICAgICAgICAgIDwvTmF2TGluaz5cclxuICAgICAgICA8L0xpbms+XHJcbiAgICAgICkpfVxyXG4gICAgICA8TmF2TGluayBvbkNsaWNrPXtzaG93RmF2b3JpdGVMaXN0fT5cclxuICAgICAgICA8SGVhcnRJY29uIHR3PVwiaW5saW5lXCIgLz5cclxuICAgICAgPC9OYXZMaW5rPlxyXG4gICAgPC9OYXZMaW5rcz4sXHJcbiAgXTtcclxuICBjb25zdCB7IHNob3dOYXZMaW5rcywgYW5pbWF0aW9uLCB0b2dnbGVOYXZiYXIgfSA9IHVzZUFuaW1hdGVkTmF2VG9nZ2xlcigpO1xyXG4gIGNvbnN0IGNvbGxhcHNlQnJlYWtwb2ludENzcyA9XHJcbiAgICBjb2xsYXBzZUJyZWFrUG9pbnRDc3NNYXBbXHJcbiAgICAgIGNvbGxhcHNlQnJlYWtwb2ludENsYXNzIGFzIGtleW9mIHR5cGVvZiBjb2xsYXBzZUJyZWFrUG9pbnRDc3NNYXBcclxuICAgIF07XHJcblxyXG4gIGNvbnN0IGRlZmF1bHRMb2dvTGluayA9IChcclxuICAgIDxMaW5rIGhyZWY9XCIvXCI+XHJcbiAgICAgIDxMb2dvTGluaz5cclxuICAgICAgICA8aW1nIHNyYz17XCIvaW1hZ2VzL2xvZ28uanBnXCJ9IGFsdD1cImxvZ29cIiAvPlxyXG4gICAgICAgIEhvbWVLaXRjaGVuXHJcbiAgICAgIDwvTG9nb0xpbms+XHJcbiAgICA8L0xpbms+XHJcbiAgKTtcclxuXHJcbiAgbG9nb0xpbmsgPSBsb2dvTGluayB8fCBkZWZhdWx0TG9nb0xpbms7XHJcbiAgbGlua3MgPSBsaW5rcyB8fCBkZWZhdWx0TGlua3M7XHJcblxyXG4gIGNvbnN0IHNlYXJjaFJlY2lwZSA9IGFzeW5jIChlOiBLZXlib2FyZEV2ZW50KSA9PiB7XHJcbiAgICBpZiAoZS5rZXkgPT09IFwiRW50ZXJcIikge1xyXG4gICAgICBpZiAoaW5wdXRSZWYuY3VycmVudD8udmFsdWU/LnRyaW0oKSA9PT0gXCJcIikge1xyXG4gICAgICAgIHJvdXRlci5wdXNoKHtcclxuICAgICAgICAgIHBhdGhuYW1lOiBcIi9yZWNpcGVzXCIsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gZWxzZVxyXG4gICAgICAgIHJvdXRlci5wdXNoKHtcclxuICAgICAgICAgIHBhdGhuYW1lOiBcIi9zZWFyY2hcIixcclxuICAgICAgICAgIHF1ZXJ5OiB7XHJcbiAgICAgICAgICAgIHM6IGlucHV0UmVmLmN1cnJlbnQ/LnZhbHVlLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBjb25zdCB0b2dnbGVNb2RhbCA9ICgpID0+IHtcclxuICAgIHNldFNob3dNb2RhbChwcmV2U3RhdGUgPT4gIXByZXZTdGF0ZSlcclxuICB9XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBpbnB1dFJlZi5jdXJyZW50LnZhbHVlID0gcm91dGVyLnF1ZXJ5Py5zIHx8IFwiXCI7XHJcbiAgfSwgW2lucHV0UmVmLmN1cnJlbnRdKTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxIZWFkZXIgY2xhc3NOYW1lPXtjbGFzc05hbWUgfHwgXCJoZWFkZXItbGlnaHRcIn0+XHJcbiAgICAgIDxEZXNrdG9wTmF2TGlua3MgY3NzPXtjb2xsYXBzZUJyZWFrcG9pbnRDc3MuZGVza3RvcE5hdkxpbmtzfT5cclxuICAgICAgICB7bG9nb0xpbmt9XHJcbiAgICAgICAgPGRpdj5cclxuICAgICAgICAgIDxJbnB1dFxyXG4gICAgICAgICAgICByZWY9e2lucHV0UmVmfVxyXG4gICAgICAgICAgICBvbktleVVwPXtzZWFyY2hSZWNpcGV9XHJcbiAgICAgICAgICAgIGlkPVwibmFtZS1pbnB1dFwiXHJcbiAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcclxuICAgICAgICAgICAgbmFtZT1cIm5hbWVcIlxyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlNlYXJjaCByZWNpcGVcIlxyXG4gICAgICAgICAgLz5cclxuICAgICAgICAgIHtsaW5rc31cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9EZXNrdG9wTmF2TGlua3M+XHJcblxyXG4gICAgICA8TW9iaWxlTmF2TGlua3NDb250YWluZXJcclxuICAgICAgICBjc3M9e2NvbGxhcHNlQnJlYWtwb2ludENzcy5tb2JpbGVOYXZMaW5rc0NvbnRhaW5lcn1cclxuICAgICAgPlxyXG4gICAgICAgIHtsb2dvTGlua31cclxuICAgICAgICA8TW9iaWxlTmF2TGlua3NcclxuICAgICAgICAgIGluaXRpYWw9e3sgeDogXCIxNTAlXCIsIGRpc3BsYXk6IFwibm9uZVwiIH19XHJcbiAgICAgICAgICBhbmltYXRlPXthbmltYXRpb259XHJcbiAgICAgICAgICBjc3M9e2NvbGxhcHNlQnJlYWtwb2ludENzcy5tb2JpbGVOYXZMaW5rc31cclxuICAgICAgICA+XHJcbiAgICAgICAgICB7bGlua3N9XHJcbiAgICAgICAgPC9Nb2JpbGVOYXZMaW5rcz5cclxuICAgICAgICA8TmF2VG9nZ2xlXHJcbiAgICAgICAgICBvbkNsaWNrPXt0b2dnbGVOYXZiYXJ9XHJcbiAgICAgICAgICBjbGFzc05hbWU9e3Nob3dOYXZMaW5rcyA/IFwib3BlblwiIDogXCJjbG9zZWRcIn1cclxuICAgICAgICA+XHJcbiAgICAgICAgICB7c2hvd05hdkxpbmtzID8gKFxyXG4gICAgICAgICAgICA8Q2xvc2VJY29uIHR3PVwidy02IGgtNlwiIC8+XHJcbiAgICAgICAgICApIDogKFxyXG4gICAgICAgICAgICA8TWVudUljb24gdHc9XCJ3LTYgaC02XCIgLz5cclxuICAgICAgICAgICl9XHJcbiAgICAgICAgPC9OYXZUb2dnbGU+XHJcbiAgICAgIDwvTW9iaWxlTmF2TGlua3NDb250YWluZXI+XHJcblxyXG4gICAgICA8UmVhY3RNb2RhbEFkYXB0ZXJcclxuICAgICAgICAgIHRpdGxlPVwiRmF2b3JpdGUgbGlzdFwiXHJcbiAgICAgICAgICBzaG93PXtzaG93TW9kYWx9XHJcbiAgICAgICAgICBvbkNsb3NlPXt0b2dnbGVNb2RhbH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICAgIHtmYXZvcml0ZUxpc3QubWFwKGVsID0+IFxyXG4gICAgICAgICAgICAgIDxDYXJkUmVjaXBlIGl0ZW1zUGVyUm93PXszfSBrZXk9e2VsLmlkTWVhbH0gZGF0YT17ZWx9Lz5cclxuICAgICAgICAgICAgKX1cclxuICAgICAgICA8L1JlYWN0TW9kYWxBZGFwdGVyPlxyXG4gICAgPC9IZWFkZXI+XHJcbiAgKTtcclxufTtcclxuIl19 */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n_c3 = NavLink;\nconst PrimaryLink = /*#__PURE__*/(0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(NavLink,  false ? 0 : {\n  target: \"e1kpf8jc6\",\n  label: \"PrimaryLink\"\n})( false ? 0 : {\n  name: \"1nrgy08\",\n  styles: \"padding-left:2rem;padding-right:2rem;padding-top:0.75rem;padding-bottom:0.75rem;border-radius:0.25rem;--tw-bg-opacity:1;background-color:rgba(100, 21, 255, var(--tw-bg-opacity));--tw-text-opacity:1;color:rgba(247, 250, 252, var(--tw-text-opacity));:hover, :focus{--tw-bg-opacity:1;background-color:rgba(80, 17, 204, var(--tw-bg-opacity));--tw-text-opacity:1;color:rgba(237, 242, 247, var(--tw-text-opacity));}:focus{--tw-shadow:0 0 0 3px rgba(66, 153, 225, 0.5);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);}border-bottom-width:0;@media (min-width: 1024px){margin-left:0;margin-right:0;}\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\nconst LogoLink = /*#__PURE__*/(0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(NavLink,  false ? 0 : {\n  target: \"e1kpf8jc5\",\n  label: \"LogoLink\"\n})( false ? 0 : {\n  name: \"1adzg6e\",\n  styles: \"display:flex;align-items:center;font-weight:900;border-bottom-width:0;font-size:1.5rem !important;margin-left:0 !important;;img{width:2.5rem;margin-right:0.75rem;;}\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n_c4 = LogoLink;\nconst MobileNavLinksContainer = /*#__PURE__*/(0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"nav\",  false ? 0 : {\n  target: \"e1kpf8jc4\",\n  label: \"MobileNavLinksContainer\"\n})( false ? 0 : {\n  name: \"1nllm5v\",\n  styles: \"display:flex;flex:1 1 0%;align-items:center;justify-content:space-between\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n_c5 = MobileNavLinksContainer;\nconst NavToggle = /*#__PURE__*/(0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"button\",  false ? 0 : {\n  target: \"e1kpf8jc3\",\n  label: \"NavToggle\"\n})( false ? 0 : {\n  name: \"15manpj\",\n  styles: \"transition-property:background-color, border-color, color, fill, stroke, opacity, box-shadow, transform;z-index:20;:focus{outline:2px solid transparent;outline-offset:2px;}:hover, :focus{--tw-text-opacity:1;color:rgba(100, 21, 255, var(--tw-text-opacity));}transition-duration:300ms;@media (min-width: 1024px){display:none;}\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n_c6 = NavToggle;\nconst MobileNavLinks = (0,framer_motion__WEBPACK_IMPORTED_MODULE_12__.motion)( /*#__PURE__*/(0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",  false ? 0 : {\n  target: \"e1kpf8jc2\",\n  label: \"MobileNavLinks\"\n})(\"z-index:10;position:fixed;top:0;left:0;right:0;margin-left:1rem;margin-right:1rem;margin-top:1.5rem;margin-bottom:1.5rem;padding:2rem;border-width:1px;text-align:center;border-radius:0.5rem;--tw-text-opacity:1;color:rgba(26, 32, 44, var(--tw-text-opacity));--tw-bg-opacity:1;background-color:rgba(255, 255, 255, var(--tw-bg-opacity));@media (min-width: 1024px){display:none;} \", NavLinks, \"{display:flex;flex-direction:column;align-items:center;;}\" + ( false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")));\n_c7 = MobileNavLinks;\nconst DesktopNavLinks = /*#__PURE__*/(0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"nav\",  false ? 0 : {\n  target: \"e1kpf8jc1\",\n  label: \"DesktopNavLinks\"\n})( false ? 0 : {\n  name: \"ivmnbp\",\n  styles: \"display:none;flex:1 1 0%;justify-content:space-between;align-items:center;@media (min-width: 1024px){display:flex;}\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n_c8 = DesktopNavLinks;\n\nconst Input = /*#__PURE__*/(0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"input\",  false ? 0 : {\n  target: \"e1kpf8jc0\",\n  label: \"Input\"\n})( false ? 0 : {\n  name: \"fgsdyk\",\n  styles: \":hover{--tw-border-opacity:1;border-color:rgba(162, 115, 255, var(--tw-border-opacity));}margin-right:0.75rem;border-width:2px;border-style:solid;padding:0.5rem;border-radius:0.25rem;--tw-border-opacity:1;border-color:rgba(226, 232, 240, var(--tw-border-opacity))\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6XFxuYXNoXFxyZXN0YXVyYW50LXVpXFxzcmNcXGxheW91dFxcSGVhZGVyLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF5RmMiLCJmaWxlIjoiRDpcXG5hc2hcXHJlc3RhdXJhbnQtdWlcXHNyY1xcbGF5b3V0XFxIZWFkZXIudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBtb3Rpb24gfSBmcm9tIFwiZnJhbWVyLW1vdGlvblwiO1xyXG5pbXBvcnQgdHcsIHsgc3R5bGVkIH0gZnJvbSBcInR3aW4ubWFjcm9cIjtcclxuaW1wb3J0IHsgUmVhY3RNb2RhbEFkYXB0ZXIsIHVzZUFuaW1hdGVkTmF2VG9nZ2xlciB9IGZyb20gXCJoZWxwZXJzXCI7XHJcbmltcG9ydCBNZW51SWNvbiBmcm9tIFwiZmVhdGhlci1pY29ucy9kaXN0L2ljb25zL21lbnUuc3ZnXCI7XHJcbmltcG9ydCBDbG9zZUljb24gZnJvbSBcImZlYXRoZXItaWNvbnMvZGlzdC9pY29ucy94LnN2Z1wiO1xyXG5pbXBvcnQgeyBJSGVhZGVyIH0gZnJvbSBcInR5cGVzXCI7XHJcbmltcG9ydCBMaW5rIGZyb20gXCJuZXh0L2xpbmtcIjtcclxuaW1wb3J0IHsgdXNlUm91dGVyIH0gZnJvbSBcIm5leHQvcm91dGVyXCI7XHJcbmltcG9ydCBjbGFzc25hbWVzIGZyb20gXCJjbGFzc25hbWVzXCI7XHJcbmltcG9ydCBIZWFydEljb24gZnJvbSBcImZlYXRoZXItaWNvbnMvZGlzdC9pY29ucy9oZWFydC5zdmdcIjtcclxuaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcclxuaW1wb3J0IHsgZ2V0RmF2b3JpdGVMaXN0IH0gZnJvbSBcInN0b3JlL3NsaWNlL3JlY2lwZS5zbGljZVwiO1xyXG5pbXBvcnQgQ2FyZFJlY2lwZSBmcm9tIFwiY29tcG9uZW50cy9jYXJkcy9DYXJkUmVjaXBlXCI7XHJcblxyXG5jb25zdCBIZWFkZXIgPSB0dy5oZWFkZXJgXHJcbiAgZmxleCBqdXN0aWZ5LWJldHdlZW4gaXRlbXMtY2VudGVyXHJcbiAgbWF4LXctc2NyZWVuLXhsIG14LWF1dG9cclxuICBteS0zXHJcbmA7XHJcblxyXG4vKiBUaGUgYmVsb3cgY29kZSBpcyBmb3IgZ2VuZXJhdGluZyBkeW5hbWljIGJyZWFrIHBvaW50cyBmb3IgbmF2YmFyLlxyXG4gKiBVc2luZyB0aGlzIHlvdSBjYW4gc3BlY2lmeSBpZiB5b3Ugd2FudCB0byBzd2l0Y2hcclxuICogdG8gdGhlIHRvZ2dsZWFibGUgbW9iaWxlIG5hdmJhciBhdCBcInNtXCIsIFwibWRcIiBvciBcImxnXCIgb3IgXCJ4bFwiIGFib3ZlIHVzaW5nIHRoZSBjb2xsYXBzZUJyZWFrcG9pbnRDbGFzcyBwcm9wXHJcbiAqIEl0cyB3cml0dGVuIGxpa2UgdGhpcyBiZWNhdXNlIHdlIGFyZSB1c2luZyBtYWNyb3MgYW5kIHdlIGNhbiBub3QgaW5zZXJ0IGR5bmFtaWMgdmFyaWFibGVzIGluIG1hY3Jvc1xyXG4gKi9cclxuXHJcbmNvbnN0IGNvbGxhcHNlQnJlYWtQb2ludENzc01hcCA9IHtcclxuICBzbToge1xyXG4gICAgbW9iaWxlTmF2TGlua3M6IHR3YHNtOmhpZGRlbmAsXHJcbiAgICBkZXNrdG9wTmF2TGlua3M6IHR3YHNtOmZsZXhgLFxyXG4gICAgbW9iaWxlTmF2TGlua3NDb250YWluZXI6IHR3YHNtOmhpZGRlbmAsXHJcbiAgfSxcclxuICBtZDoge1xyXG4gICAgbW9iaWxlTmF2TGlua3M6IHR3YG1kOmhpZGRlbmAsXHJcbiAgICBkZXNrdG9wTmF2TGlua3M6IHR3YG1kOmZsZXhgLFxyXG4gICAgbW9iaWxlTmF2TGlua3NDb250YWluZXI6IHR3YG1kOmhpZGRlbmAsXHJcbiAgfSxcclxuICBsZzoge1xyXG4gICAgbW9iaWxlTmF2TGlua3M6IHR3YGxnOmhpZGRlbmAsXHJcbiAgICBkZXNrdG9wTmF2TGlua3M6IHR3YGxnOmZsZXhgLFxyXG4gICAgbW9iaWxlTmF2TGlua3NDb250YWluZXI6IHR3YGxnOmhpZGRlbmAsXHJcbiAgfSxcclxuICB4bDoge1xyXG4gICAgbW9iaWxlTmF2TGlua3M6IHR3YGxnOmhpZGRlbmAsXHJcbiAgICBkZXNrdG9wTmF2TGlua3M6IHR3YGxnOmZsZXhgLFxyXG4gICAgbW9iaWxlTmF2TGlua3NDb250YWluZXI6IHR3YGxnOmhpZGRlbmAsXHJcbiAgfSxcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBOYXZMaW5rczogYW55ID0gdHcuZGl2YGlubGluZS1ibG9ja2A7XHJcbmV4cG9ydCBjb25zdCBOYXZMaW5rID0gc3R5bGVkLmFgXHJcbiAgJHt0d2BjdXJzb3ItcG9pbnRlclxyXG4gIHRleHQtbGcgbXktMiBsZzp0ZXh0LXNtIGxnOm14LTYgbGc6bXktMFxyXG4gIGZvbnQtc2VtaWJvbGQgdHJhY2tpbmctd2lkZSB0cmFuc2l0aW9uIGR1cmF0aW9uLTMwMFxyXG4gIHBiLTEgYm9yZGVyLWItMiBib3JkZXItdHJhbnNwYXJlbnQgaG92ZXI6Ym9yZGVyLXByaW1hcnktNTAwIGhvY3VzOnRleHQtcHJpbWFyeS01MDBgfTtcclxuICAmLmFjdGl2ZSB7XHJcbiAgICAke3R3YGJvcmRlci1wcmltYXJ5LTUwMCB0ZXh0LXByaW1hcnktNTAwYH1cclxuICB9XHJcbmA7XHJcbmV4cG9ydCBjb25zdCBQcmltYXJ5TGluazogYW55ID0gdHcoTmF2TGluaylgXHJcbiAgbGc6bXgtMFxyXG4gIHB4LTggcHktMyByb3VuZGVkIGJnLXByaW1hcnktNTAwIHRleHQtZ3JheS0xMDBcclxuICBob2N1czpiZy1wcmltYXJ5LTcwMCBob2N1czp0ZXh0LWdyYXktMjAwIGZvY3VzOnNoYWRvdy1vdXRsaW5lXHJcbiAgYm9yZGVyLWItMFxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IExvZ29MaW5rID0gc3R5bGVkKE5hdkxpbmspYFxyXG4gICR7dHdgZmxleCBpdGVtcy1jZW50ZXIgZm9udC1ibGFjayBib3JkZXItYi0wIHRleHQtMnhsISBtbC0wIWB9O1xyXG4gIGltZyB7XHJcbiAgICAke3R3YHctMTAgbXItM2B9XHJcbiAgfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IE1vYmlsZU5hdkxpbmtzQ29udGFpbmVyOiBhbnkgPSB0dy5uYXZgZmxleCBmbGV4LTEgaXRlbXMtY2VudGVyIGp1c3RpZnktYmV0d2VlbmA7XHJcbmV4cG9ydCBjb25zdCBOYXZUb2dnbGUgPSB0dy5idXR0b25gXHJcbiAgbGc6aGlkZGVuIHotMjAgZm9jdXM6b3V0bGluZS1ub25lIGhvY3VzOnRleHQtcHJpbWFyeS01MDAgdHJhbnNpdGlvbiBkdXJhdGlvbi0zMDBcclxuYDtcclxuZXhwb3J0IGNvbnN0IE1vYmlsZU5hdkxpbmtzID0gbW90aW9uKHN0eWxlZC5kaXZgXHJcbiAgJHt0d2BsZzpoaWRkZW4gei0xMCBmaXhlZCB0b3AtMCBpbnNldC14LTAgbXgtNCBteS02IHAtOCBib3JkZXIgdGV4dC1jZW50ZXIgcm91bmRlZC1sZyB0ZXh0LWdyYXktOTAwIGJnLXdoaXRlYH1cclxuICAke05hdkxpbmtzfSB7XHJcbiAgICAke3R3YGZsZXggZmxleC1jb2wgaXRlbXMtY2VudGVyYH1cclxuICB9XHJcbmApO1xyXG5cclxuZXhwb3J0IGNvbnN0IERlc2t0b3BOYXZMaW5rczogYW55ID0gdHcubmF2YFxyXG4gIGhpZGRlbiBsZzpmbGV4IGZsZXgtMSBqdXN0aWZ5LWJldHdlZW4gaXRlbXMtY2VudGVyXHJcbmA7XHJcblxyXG5jb25zdCBJbnB1dCA9IHR3LmlucHV0YGhvdmVyOmJvcmRlci1wcmltYXJ5LTEwMCBtci0zIGJvcmRlci0yIGJvcmRlci1zb2xpZCBwLTIgcm91bmRlZCBib3JkZXItZ3JheS0zMDBgO1xyXG5cclxuY29uc3QgdGFicyA9IFtcclxuICB7XHJcbiAgICBwYXRobmFtZTogXCIvYWJvdXQtdXNcIixcclxuICAgIG5hbWU6IFwiQWJvdXRcIixcclxuICB9LFxyXG4gIHtcclxuICAgIHBhdGhuYW1lOiBcIi9yZWNpcGVzXCIsXHJcbiAgICBuYW1lOiBcIlJlY2lwZVwiLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgcGF0aG5hbWU6IFwiL3Bvc3RzXCIsXHJcbiAgICBuYW1lOiBcIkJsb2dcIixcclxuICB9LFxyXG5dO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgKHtcclxuICBsb2dvTGluayxcclxuICBsaW5rcyxcclxuICBjbGFzc05hbWUsXHJcbiAgY29sbGFwc2VCcmVha3BvaW50Q2xhc3MgPSBcImxnXCIsXHJcbn06IElIZWFkZXIpID0+IHtcclxuICBjb25zdCByb3V0ZXIgPSB1c2VSb3V0ZXIoKTtcclxuICBjb25zdCBbc2hvd01vZGFsLCBzZXRTaG93TW9kYWxdID0gdXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpXHJcbiAgY29uc3QgaW5wdXRSZWYgPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4obnVsbCk7XHJcbiAgY29uc3QgYWN0aXZlVGFiID0gcm91dGVyLnBhdGhuYW1lO1xyXG4gIGNvbnN0IGZhdm9yaXRlTGlzdCA9IHVzZVNlbGVjdG9yKGdldEZhdm9yaXRlTGlzdClcclxuXHJcbiAgY29uc3Qgc2hvd0Zhdm9yaXRlTGlzdCA9ICgpID0+IHtcclxuICAgIHNldFNob3dNb2RhbCh0cnVlKVxyXG4gIH1cclxuXHJcbiAgY29uc3QgZGVmYXVsdExpbmtzID0gW1xyXG4gICAgPE5hdkxpbmtzIGtleT17MX0+XHJcbiAgICAgIHt0YWJzLm1hcCgoZWwpID0+IChcclxuICAgICAgICA8TGluayBrZXk9e2VsLnBhdGhuYW1lfSBocmVmPXtlbC5wYXRobmFtZX0+XHJcbiAgICAgICAgICA8TmF2TGlua1xyXG4gICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzbmFtZXMoeyBhY3RpdmU6IGVsLnBhdGhuYW1lID09PSBhY3RpdmVUYWIgfSl9XHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIHtlbC5uYW1lfVxyXG4gICAgICAgICAgPC9OYXZMaW5rPlxyXG4gICAgICAgIDwvTGluaz5cclxuICAgICAgKSl9XHJcbiAgICAgIDxOYXZMaW5rIG9uQ2xpY2s9e3Nob3dGYXZvcml0ZUxpc3R9PlxyXG4gICAgICAgIDxIZWFydEljb24gdHc9XCJpbmxpbmVcIiAvPlxyXG4gICAgICA8L05hdkxpbms+XHJcbiAgICA8L05hdkxpbmtzPixcclxuICBdO1xyXG4gIGNvbnN0IHsgc2hvd05hdkxpbmtzLCBhbmltYXRpb24sIHRvZ2dsZU5hdmJhciB9ID0gdXNlQW5pbWF0ZWROYXZUb2dnbGVyKCk7XHJcbiAgY29uc3QgY29sbGFwc2VCcmVha3BvaW50Q3NzID1cclxuICAgIGNvbGxhcHNlQnJlYWtQb2ludENzc01hcFtcclxuICAgICAgY29sbGFwc2VCcmVha3BvaW50Q2xhc3MgYXMga2V5b2YgdHlwZW9mIGNvbGxhcHNlQnJlYWtQb2ludENzc01hcFxyXG4gICAgXTtcclxuXHJcbiAgY29uc3QgZGVmYXVsdExvZ29MaW5rID0gKFxyXG4gICAgPExpbmsgaHJlZj1cIi9cIj5cclxuICAgICAgPExvZ29MaW5rPlxyXG4gICAgICAgIDxpbWcgc3JjPXtcIi9pbWFnZXMvbG9nby5qcGdcIn0gYWx0PVwibG9nb1wiIC8+XHJcbiAgICAgICAgSG9tZUtpdGNoZW5cclxuICAgICAgPC9Mb2dvTGluaz5cclxuICAgIDwvTGluaz5cclxuICApO1xyXG5cclxuICBsb2dvTGluayA9IGxvZ29MaW5rIHx8IGRlZmF1bHRMb2dvTGluaztcclxuICBsaW5rcyA9IGxpbmtzIHx8IGRlZmF1bHRMaW5rcztcclxuXHJcbiAgY29uc3Qgc2VhcmNoUmVjaXBlID0gYXN5bmMgKGU6IEtleWJvYXJkRXZlbnQpID0+IHtcclxuICAgIGlmIChlLmtleSA9PT0gXCJFbnRlclwiKSB7XHJcbiAgICAgIGlmIChpbnB1dFJlZi5jdXJyZW50Py52YWx1ZT8udHJpbSgpID09PSBcIlwiKSB7XHJcbiAgICAgICAgcm91dGVyLnB1c2goe1xyXG4gICAgICAgICAgcGF0aG5hbWU6IFwiL3JlY2lwZXNcIixcclxuICAgICAgICB9KTtcclxuICAgICAgfSBlbHNlXHJcbiAgICAgICAgcm91dGVyLnB1c2goe1xyXG4gICAgICAgICAgcGF0aG5hbWU6IFwiL3NlYXJjaFwiLFxyXG4gICAgICAgICAgcXVlcnk6IHtcclxuICAgICAgICAgICAgczogaW5wdXRSZWYuY3VycmVudD8udmFsdWUsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIGNvbnN0IHRvZ2dsZU1vZGFsID0gKCkgPT4ge1xyXG4gICAgc2V0U2hvd01vZGFsKHByZXZTdGF0ZSA9PiAhcHJldlN0YXRlKVxyXG4gIH1cclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGlucHV0UmVmLmN1cnJlbnQudmFsdWUgPSByb3V0ZXIucXVlcnk/LnMgfHwgXCJcIjtcclxuICB9LCBbaW5wdXRSZWYuY3VycmVudF0pO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPEhlYWRlciBjbGFzc05hbWU9e2NsYXNzTmFtZSB8fCBcImhlYWRlci1saWdodFwifT5cclxuICAgICAgPERlc2t0b3BOYXZMaW5rcyBjc3M9e2NvbGxhcHNlQnJlYWtwb2ludENzcy5kZXNrdG9wTmF2TGlua3N9PlxyXG4gICAgICAgIHtsb2dvTGlua31cclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgPElucHV0XHJcbiAgICAgICAgICAgIHJlZj17aW5wdXRSZWZ9XHJcbiAgICAgICAgICAgIG9uS2V5VXA9e3NlYXJjaFJlY2lwZX1cclxuICAgICAgICAgICAgaWQ9XCJuYW1lLWlucHV0XCJcclxuICAgICAgICAgICAgdHlwZT1cInRleHRcIlxyXG4gICAgICAgICAgICBuYW1lPVwibmFtZVwiXHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiU2VhcmNoIHJlY2lwZVwiXHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgICAge2xpbmtzfVxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L0Rlc2t0b3BOYXZMaW5rcz5cclxuXHJcbiAgICAgIDxNb2JpbGVOYXZMaW5rc0NvbnRhaW5lclxyXG4gICAgICAgIGNzcz17Y29sbGFwc2VCcmVha3BvaW50Q3NzLm1vYmlsZU5hdkxpbmtzQ29udGFpbmVyfVxyXG4gICAgICA+XHJcbiAgICAgICAge2xvZ29MaW5rfVxyXG4gICAgICAgIDxNb2JpbGVOYXZMaW5rc1xyXG4gICAgICAgICAgaW5pdGlhbD17eyB4OiBcIjE1MCVcIiwgZGlzcGxheTogXCJub25lXCIgfX1cclxuICAgICAgICAgIGFuaW1hdGU9e2FuaW1hdGlvbn1cclxuICAgICAgICAgIGNzcz17Y29sbGFwc2VCcmVha3BvaW50Q3NzLm1vYmlsZU5hdkxpbmtzfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIHtsaW5rc31cclxuICAgICAgICA8L01vYmlsZU5hdkxpbmtzPlxyXG4gICAgICAgIDxOYXZUb2dnbGVcclxuICAgICAgICAgIG9uQ2xpY2s9e3RvZ2dsZU5hdmJhcn1cclxuICAgICAgICAgIGNsYXNzTmFtZT17c2hvd05hdkxpbmtzID8gXCJvcGVuXCIgOiBcImNsb3NlZFwifVxyXG4gICAgICAgID5cclxuICAgICAgICAgIHtzaG93TmF2TGlua3MgPyAoXHJcbiAgICAgICAgICAgIDxDbG9zZUljb24gdHc9XCJ3LTYgaC02XCIgLz5cclxuICAgICAgICAgICkgOiAoXHJcbiAgICAgICAgICAgIDxNZW51SWNvbiB0dz1cInctNiBoLTZcIiAvPlxyXG4gICAgICAgICAgKX1cclxuICAgICAgICA8L05hdlRvZ2dsZT5cclxuICAgICAgPC9Nb2JpbGVOYXZMaW5rc0NvbnRhaW5lcj5cclxuXHJcbiAgICAgIDxSZWFjdE1vZGFsQWRhcHRlclxyXG4gICAgICAgICAgdGl0bGU9XCJGYXZvcml0ZSBsaXN0XCJcclxuICAgICAgICAgIHNob3c9e3Nob3dNb2RhbH1cclxuICAgICAgICAgIG9uQ2xvc2U9e3RvZ2dsZU1vZGFsfVxyXG4gICAgICAgID5cclxuICAgICAgICAgICAge2Zhdm9yaXRlTGlzdC5tYXAoZWwgPT4gXHJcbiAgICAgICAgICAgICAgPENhcmRSZWNpcGUgaXRlbXNQZXJSb3c9ezN9IGtleT17ZWwuaWRNZWFsfSBkYXRhPXtlbH0vPlxyXG4gICAgICAgICAgICApfVxyXG4gICAgICAgIDwvUmVhY3RNb2RhbEFkYXB0ZXI+XHJcbiAgICA8L0hlYWRlcj5cclxuICApO1xyXG59O1xyXG4iXX0= */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\n_c9 = Input;\nconst tabs = [{\n  pathname: \"/about-us\",\n  name: \"About\"\n}, {\n  pathname: \"/recipes\",\n  name: \"Recipe\"\n}, {\n  pathname: \"/posts\",\n  name: \"Blog\"\n}];\n\nvar _ref2 =  false ? 0 : {\n  name: \"klojty-defaultLinks\",\n  styles: \"display:inline;label:defaultLinks;\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref3 =  false ? 0 : {\n  name: \"11v5qdi\",\n  styles: \"width:1.5rem;height:1.5rem\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref4 =  false ? 0 : {\n  name: \"11v5qdi\",\n  styles: \"width:1.5rem;height:1.5rem\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (_s(_ref => {\n  _s();\n\n  let {\n    logoLink,\n    links,\n    className,\n    collapseBreakpointClass = \"lg\"\n  } = _ref;\n  const router = (0,next_router__WEBPACK_IMPORTED_MODULE_6__.useRouter)();\n  const {\n    0: showModal,\n    1: setShowModal\n  } = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n  const inputRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n  const activeTab = router.pathname;\n  const favoriteList = (0,react_redux__WEBPACK_IMPORTED_MODULE_9__.useSelector)(store_slice_recipe_slice__WEBPACK_IMPORTED_MODULE_10__.getFavoriteList);\n\n  const showFavoriteList = () => {\n    setShowModal(true);\n  };\n\n  const defaultLinks = [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_13__.jsxDEV)(NavLinks, {\n    children: [tabs.map(el => (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_13__.jsxDEV)((next_link__WEBPACK_IMPORTED_MODULE_5___default()), {\n      href: el.pathname,\n      children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_13__.jsxDEV)(NavLink, {\n        className: classnames__WEBPACK_IMPORTED_MODULE_7___default()({\n          active: el.pathname === activeTab\n        }),\n        children: el.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, undefined)\n    }, el.pathname, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }, undefined)), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_13__.jsxDEV)(NavLink, {\n      onClick: showFavoriteList,\n      children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_13__.jsxDEV)(feather_icons_dist_icons_heart_svg__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n        css: _ref2,\n        \"data-tw\": \"inline\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, undefined)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, undefined)]\n  }, 1, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, undefined)];\n  const {\n    showNavLinks,\n    animation,\n    toggleNavbar\n  } = (0,helpers__WEBPACK_IMPORTED_MODULE_2__.useAnimatedNavToggler)();\n  const collapseBreakpointCss = collapseBreakPointCssMap[collapseBreakpointClass];\n\n  const defaultLogoLink = (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_13__.jsxDEV)((next_link__WEBPACK_IMPORTED_MODULE_5___default()), {\n    href: \"/\",\n    children: (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_13__.jsxDEV)(LogoLink, {\n      children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_13__.jsxDEV)(\"img\", {\n        src: \"/images/logo.jpg\",\n        alt: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, undefined), \"HomeKitchen\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, undefined)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, undefined);\n\n  logoLink = logoLink || defaultLogoLink;\n  links = links || defaultLinks;\n\n  const searchRecipe = async e => {\n    if (e.key === \"Enter\") {\n      if (inputRef.current?.value?.trim() === \"\") {\n        router.push({\n          pathname: \"/recipes\"\n        });\n      } else router.push({\n        pathname: \"/search\",\n        query: {\n          s: inputRef.current?.value\n        }\n      });\n    }\n  };\n\n  const toggleModal = () => {\n    setShowModal(prevState => !prevState);\n  };\n\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    inputRef.current.value = router.query?.s || \"\";\n  }, [inputRef.current]);\n  return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_13__.jsxDEV)(Header, {\n    className: className || \"header-light\",\n    children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_13__.jsxDEV)(DesktopNavLinks, {\n      css: collapseBreakpointCss.desktopNavLinks,\n      children: [logoLink, (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_13__.jsxDEV)(\"div\", {\n        children: [(0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_13__.jsxDEV)(Input, {\n          ref: inputRef,\n          onKeyUp: searchRecipe,\n          id: \"name-input\",\n          type: \"text\",\n          name: \"name\",\n          placeholder: \"Search recipe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, undefined), links]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, undefined)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, undefined), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_13__.jsxDEV)(MobileNavLinksContainer, {\n      css: collapseBreakpointCss.mobileNavLinksContainer,\n      children: [logoLink, (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_13__.jsxDEV)(MobileNavLinks, {\n        initial: {\n          x: \"150%\",\n          display: \"none\"\n        },\n        animate: animation,\n        css: collapseBreakpointCss.mobileNavLinks,\n        children: links\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, undefined), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_13__.jsxDEV)(NavToggle, {\n        onClick: toggleNavbar,\n        className: showNavLinks ? \"open\" : \"closed\",\n        children: showNavLinks ? (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_13__.jsxDEV)(feather_icons_dist_icons_x_svg__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n          css: _ref3,\n          \"data-tw\": \"w-6 h-6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 13\n        }, undefined) : (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_13__.jsxDEV)(feather_icons_dist_icons_menu_svg__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n          css: _ref4,\n          \"data-tw\": \"w-6 h-6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }, undefined)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, undefined)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, undefined), (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_13__.jsxDEV)(helpers__WEBPACK_IMPORTED_MODULE_2__.ReactModalAdapter, {\n      title: \"Favorite list\",\n      show: showModal,\n      onClose: toggleModal,\n      children: favoriteList.map(el => (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_13__.jsxDEV)(components_cards_CardRecipe__WEBPACK_IMPORTED_MODULE_11__[\"default\"], {\n        itemsPerRow: 3,\n        data: el\n      }, el.idMeal, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 15\n      }, undefined))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, undefined)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 5\n  }, undefined);\n}, \"+iyhu/Wcu72hLzT+nSP3Cc1+ItQ=\", false, function () {\n  return [next_router__WEBPACK_IMPORTED_MODULE_6__.useRouter, react_redux__WEBPACK_IMPORTED_MODULE_9__.useSelector, helpers__WEBPACK_IMPORTED_MODULE_2__.useAnimatedNavToggler];\n}));\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9;\n\n$RefreshReg$(_c, \"Header\");\n$RefreshReg$(_c2, \"NavLinks\");\n$RefreshReg$(_c3, \"NavLink\");\n$RefreshReg$(_c4, \"LogoLink\");\n$RefreshReg$(_c5, \"MobileNavLinksContainer\");\n$RefreshReg$(_c6, \"NavToggle\");\n$RefreshReg$(_c7, \"MobileNavLinks\");\n$RefreshReg$(_c8, \"DesktopNavLinks\");\n$RefreshReg$(_c9, \"Input\");\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/layout/Header.tsx\n"));

/***/ })

});